{"version":3,"sources":["tmp/js/components/postcode.js","tmp/js/components/analytics.js","tmp/js/app.js"],"names":["INCODE_REGEX","POSTCODE_REGEX","SPACE_REGEX","sanitize","s","replace","toUpperCase","isValid","postcode","match","toOutcode","gtag","command","args","window","dataLayer","push","arguments","GaMeasurementId","initAnalytics","gaMeasurementId","Boolean","setDefaultConsent","loadGaScript","Date","pageViewParams","getPiiSafePageView","send_page_view","page_path","page_location","page_referrer","referrer","cookie_flags","sendPageViewEvent","analytics_storage","f","document","getElementsByTagName","j","createElement","async","src","parentNode","insertBefore","pageView","page_title","title","send_to","piiSafeReferrerQueryString","getPiiSafeQueryString","URL","search","urlArray","split","piiSafeQueryString","location","href","pathname","queryString","queryParams","URLSearchParams","get","set","delete","toString","GA_MEASUREMENT_ID","$","fhgov","this","init","showHideFilters","cookiesBanner","click","evt","preventDefault","toggleClass","$cookiesBanner","$cookiesBannerMessage","$cookiesBannerConfirmation","$cookiesBannerAccepted","$cookiesBannerRejected","date","setTime","getTime","cookiesAccept","cookie","addClass","removeClass","prop","cookiesReject","deleteCookies","cookies","i","length","equals","indexOf","name","substr","cookie_value","cookieArr","cookiePair","trim","decodeURIComponent","getCookie","is","animate","scrollTop","jQuery"],"mappings":"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","file":"app.js","sourcesContent":["// from https://github.com/ideal-postcodes/postcode\n/**\n * @hidden\n */\nexport const DISTRICT_SPLIT_REGEX = /^([a-z]{1,2}\\d)([a-z])$/i;\n/**\n * Tests for the unit section of a postcode\n */\nexport const UNIT_REGEX = /[a-z]{2}$/i;\n/**\n * Tests for the inward code section of a postcode\n */\nexport const INCODE_REGEX = /\\d[a-z]{2}$/i;\n/**\n * Tests for the outward code section of a postcode\n */\nexport const OUTCODE_REGEX = /^[a-z]{1,2}\\d[a-z\\d]?$/i;\n/**\n * Tests for a valid postcode\n */\nexport const POSTCODE_REGEX = /^[a-z]{1,2}\\d[a-z\\d]?\\s*\\d[a-z]{2}$/i;\n/**\n * Test for a valid postcode embedded in text\n */\nexport const POSTCODE_CORPUS_REGEX = /[a-z]{1,2}\\d[a-z\\d]?\\s*\\d[a-z]{2}/gi;\n/**\n * Tests for the area section of a postcode\n */\nexport const AREA_REGEX = /^[a-z]{1,2}/i;\n/**\n * Invalid postcode prototype\n * @hidden\n */\nconst invalidPostcode = {\n    valid: false,\n    postcode: null,\n    incode: null,\n    outcode: null,\n    area: null,\n    district: null,\n    subDistrict: null,\n    sector: null,\n    unit: null,\n};\n/**\n * Return first elem of input is RegExpMatchArray or null if input null\n * @hidden\n */\nconst firstOrNull = (match) => {\n    if (match === null)\n        return null;\n    return match[0];\n};\nconst SPACE_REGEX = /\\s+/gi;\n/**\n * Drop all spaces and uppercase\n * @hidden\n */\nconst sanitize = (s) => s.replace(SPACE_REGEX, \"\").toUpperCase();\n/**\n * Sanitizes string and returns regex matches\n * @hidden\n */\nconst matchOn = (s, regex) => sanitize(s).match(regex);\n/**\n * Detects a \"valid\" postcode\n * - Starts and ends on a non-space character\n * - Any length of intervening space is allowed\n * - Must conform to one of following schemas:\n *  - AA1A 1AA\n *  - A1A 1AA\n *  - A1 1AA\n *  - A99 9AA\n *  - AA9 9AA\n *  - AA99 9AA\n */\nexport const isValid = (postcode) => postcode.match(POSTCODE_REGEX) !== null;\n/**\n * Returns true if string is a valid outcode\n */\nexport const validOutcode = (outcode) => outcode.match(OUTCODE_REGEX) !== null;\n/**\n * Returns a normalised postcode string (i.e. uppercased and properly spaced)\n *\n * Returns null if invalid postcode\n */\nexport const toNormalised = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const incode = toIncode(postcode);\n    if (incode === null)\n        return null;\n    return `${outcode} ${incode}`;\n};\n/**\n * Returns a correctly formatted outcode given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toOutcode = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    return sanitize(postcode).replace(INCODE_REGEX, \"\");\n};\n/**\n * Returns a correctly formatted incode given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toIncode = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, INCODE_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted area given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toArea = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, AREA_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted sector given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toSector = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const incode = toIncode(postcode);\n    if (incode === null)\n        return null;\n    return `${outcode} ${incode[0]}`;\n};\n/**\n * Returns a correctly formatted unit given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toUnit = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, UNIT_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted district given a postcode\n *\n * Returns null if invalid postcode\n *\n * @example\n *\n * ```\n * toDistrict(\"AA9 9AA\") // => \"AA9\"\n * toDistrict(\"A9A 9AA\") // => \"A9\"\n * ```\n */\nexport const toDistrict = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const match = outcode.match(DISTRICT_SPLIT_REGEX);\n    if (match === null)\n        return outcode;\n    return match[1];\n};\n/**\n * Returns a correctly formatted subdistrict given a postcode\n *\n * Returns null if no subdistrict is available on valid postcode\n * Returns null if invalid postcode\n *\n * @example\n *\n * ```\n * toSubDistrict(\"AA9A 9AA\") // => \"AA9A\"\n * toSubDistrict(\"A9A 9AA\") // => \"A9A\"\n * toSubDistrict(\"AA9 9AA\") // => null\n * toSubDistrict(\"A9 9AA\") // => null\n * ```\n */\nexport const toSubDistrict = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const split = outcode.match(DISTRICT_SPLIT_REGEX);\n    if (split === null)\n        return null;\n    return outcode;\n};\n/**\n * Returns a ValidPostcode or InvalidPostcode object from a postcode string\n *\n * @example\n *\n * ```\n * import { parse } from \"postcode\";\n *\n * const {\n * postcode,    // => \"SW1A 2AA\"\n * outcode,     // => \"SW1A\"\n * incode,      // => \"2AA\"\n * area,        // => \"SW\"\n * district,    // => \"SW1\"\n * unit,        // => \"AA\"\n * sector,      // => \"SW1A 2\"\n * subDistrict, // => \"SW1A\"\n * valid,       // => true\n * } = parse(\"Sw1A     2aa\");\n *\n * const {\n * postcode,    // => null\n * outcode,     // => null\n * incode,      // => null\n * area,        // => null\n * district,    // => null\n * unit,        // => null\n * sector,      // => null\n * subDistrict, // => null\n * valid,       // => false\n * } = parse(\"    Oh no, ):   \");\n * ```\n */\nexport const parse = (postcode) => {\n    if (!isValid(postcode))\n        return Object.assign({}, invalidPostcode);\n    return {\n        valid: true,\n        postcode: toNormalised(postcode),\n        incode: toIncode(postcode),\n        outcode: toOutcode(postcode),\n        area: toArea(postcode),\n        district: toDistrict(postcode),\n        subDistrict: toSubDistrict(postcode),\n        sector: toSector(postcode),\n        unit: toUnit(postcode),\n    };\n};\n/**\n * Searches a body of text for postcode matches\n *\n * Returns an empty array if no match\n *\n * @example\n *\n * ```\n * // Retrieve valid postcodes in a body of text\n * const matches = match(\"The PM and her no.2 live at SW1A2aa and SW1A 2AB\"); // => [\"SW1A2aa\", \"SW1A 2AB\"]\n *\n * // Perform transformations like normalisation postcodes using `.map` and `toNormalised`\n * matches.map(toNormalised); // => [\"SW1A 2AA\", \"SW1A 2AB\"]\n *\n * // No matches yields empty array\n * match(\"Some London outward codes are SW1A, NW1 and E1\"); // => []\n * ```\n */\nexport const match = (corpus) => corpus.match(POSTCODE_CORPUS_REGEX) || [];\n/**\n * Replaces postcodes in a body of text with a string\n *\n * By default the replacement string is empty string `\"\"`\n *\n * @example\n *\n * ```\n * // Replace postcodes in a body of text\n * replace(\"The PM and her no.2 live at SW1A2AA and SW1A 2AB\");\n * // => { match: [\"SW1A2AA\", \"SW1A 2AB\"], result: \"The PM and her no.2 live at  and \" }\n *\n * // Add custom replacement\n * replace(\"The PM lives at SW1A 2AA\", \"Downing Street\");\n * // => { match: [\"SW1A 2AA\"], result: \"The PM lives at Downing Street\" };\n *\n * // No match\n * replace(\"Some London outward codes are SW1A, NW1 and E1\");\n * // => { match: [], result: \"Some London outward codes are SW1A, NW1 and E1\" }\n * ```\n */\nexport const replace = (corpus, replaceWith = \"\") => ({\n    match: match(corpus),\n    result: corpus.replace(POSTCODE_CORPUS_REGEX, replaceWith),\n});\nexport const FIXABLE_REGEX = /^\\s*[a-z01]{1,2}[0-9oi][a-z\\d]?\\s*[0-9oi][a-z01]{2}\\s*$/i;\n/**\n * Attempts to fix and clean a postcode. Specifically:\n * - Performs character conversion on obviously wrong and commonly mixed up letters (e.g. O => 0 and vice versa)\n * - Trims string\n * - Properly adds space between outward and inward codes\n *\n * If the postcode cannot be coerced into a valid format, the original string is returned\n *\n * @example\n * ```javascript\n * fix(\" SW1A  2AO\") => \"SW1A 2AO\" // Properly spaces\n * fix(\"SW1A 2A0\") => \"SW1A 2AO\" // 0 is coerced into \"0\"\n * ```\n *\n * Aims to be used in conjunction with parse to make postcode entry more forgiving:\n *\n * @example\n * ```javascript\n * const { inward } = parse(fix(\"SW1A 2A0\")); // inward = \"2AO\"\n * ```\n */\nexport const fix = (s) => {\n    const match = s.match(FIXABLE_REGEX);\n    if (match === null)\n        return s;\n    s = s.toUpperCase().trim().replace(/\\s+/gi, \"\");\n    const l = s.length;\n    const inward = s.slice(l - 3, l);\n    return `${coerceOutcode(s.slice(0, l - 3))} ${coerce(\"NLL\", inward)}`;\n};\nconst toLetter = {\n    \"0\": \"O\",\n    \"1\": \"I\",\n};\nconst toNumber = {\n    O: \"0\",\n    I: \"1\",\n};\nconst coerceOutcode = (i) => {\n    if (i.length === 2)\n        return coerce(\"LN\", i);\n    if (i.length === 3)\n        return coerce(\"L??\", i);\n    if (i.length === 4)\n        return coerce(\"LLN?\", i);\n    return i;\n};\n/**\n * Given a pattern of letters, numbers and unknowns represented as a sequence\n * of L, Ns and ? respectively; coerce them into the correct type given a\n * mapping of potentially confused letters\n *\n * @hidden\n *\n * @example coerce(\"LLN\", \"0O8\") => \"OO8\"\n */\nconst coerce = (pattern, input) => input\n    .split(\"\")\n    .reduce((acc, c, i) => {\n    const target = pattern.charAt(i);\n    if (target === \"N\")\n        acc.push(toNumber[c] || c);\n    if (target === \"L\")\n        acc.push(toLetter[c] || c);\n    if (target === \"?\")\n        acc.push(c);\n    return acc;\n}, [])\n    .join(\"\");\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","//todo: consent mode debugging/check: https://developers.google.com/tag-platform/devguides/consent-debugging\nimport { toOutcode } from './postcode';\nfunction gtag(command, ...args) {\n    window.dataLayer = window.dataLayer || [];\n    window.dataLayer.push(arguments);\n}\nlet GaMeasurementId = '';\n//todo: use prototype? (or class?)\n// (having an object (prototype/class) will ensure that GaMeasurementId will have already been set)\nexport default function initAnalytics(gaMeasurementId) {\n    // if the environment doesn't have a measurement id, don't load analytics\n    if (!Boolean(gaMeasurementId)) {\n        return;\n    }\n    GaMeasurementId = gaMeasurementId;\n    setDefaultConsent();\n    loadGaScript(gaMeasurementId);\n    gtag('js', new Date());\n    const pageViewParams = getPiiSafePageView(gaMeasurementId);\n    // set the config for auto generated events other than page_view\n    gtag('config', gaMeasurementId, {\n        send_page_view: false,\n        page_path: pageViewParams.page_path,\n        page_location: pageViewParams.page_location,\n        page_referrer: pageViewParams.referrer,\n        cookie_flags: 'secure'\n    });\n    //todo: if user has consented to analytics cookies\n    if (false) {\n        updateAnalyticsStorageConsent(true);\n    }\n    sendPageViewEvent();\n}\nfunction setDefaultConsent() {\n    gtag('consent', 'default', {\n        'analytics_storage': 'denied'\n    });\n    gtag('set', 'url_passthrough', true);\n}\nexport function updateAnalyticsStorageConsent(granted, delayMs) {\n    let options = {\n        'analytics_storage': granted ? 'granted' : 'denied'\n    };\n    if (typeof delayMs !== 'undefined') {\n        options['wait_for_update'] = delayMs;\n    }\n    gtag('consent', 'update', options);\n}\nexport function sendPageViewEvent() {\n    // send the page_view event manually (https://developers.google.com/analytics/devguides/collection/gtagjs/pages#default_behavior)\n    gtag('event', 'page_view', getPiiSafePageView(GaMeasurementId));\n}\nexport function sendAnalyticsCustomEvent(accepted, source) {\n    gtag('event', 'analytics', {\n        'accepted': accepted,\n        'source': source\n    });\n}\nfunction loadGaScript(gaMeasurementId) {\n    const f = document.getElementsByTagName('script')[0];\n    const j = document.createElement('script');\n    j.async = true;\n    j.src = 'https://www.googletagmanager.com/gtag/js?id=' + gaMeasurementId;\n    f.parentNode.insertBefore(j, f);\n}\nfunction getPiiSafePageView(gaMeasurementId) {\n    const pageView = {\n        page_title: document.title,\n        send_to: gaMeasurementId,\n        referrer: '',\n        page_location: '',\n        page_path: ''\n    };\n    //todo: set as referrer or page_referrer in pageView - does it matter? is it only picking it up from the config?\n    //todo: get piisafe referrer function\n    if (document.referrer !== '') {\n        const referrerUrl = new URL(document.referrer);\n        const piiSafeReferrerQueryString = getPiiSafeQueryString(referrerUrl.search);\n        if (piiSafeReferrerQueryString == null) {\n            pageView.referrer = document.referrer;\n        }\n        else {\n            const urlArray = document.referrer.split('?');\n            pageView.referrer = urlArray[0] + piiSafeReferrerQueryString;\n        }\n    }\n    const piiSafeQueryString = getPiiSafeQueryString(window.location.search);\n    if (piiSafeQueryString == null) {\n        pageView.page_location = window.location.href;\n        pageView.page_path = window.location.pathname + window.location.search;\n        return pageView;\n    }\n    const urlArray = window.location.href.split('?');\n    pageView.page_location = urlArray[0] + piiSafeQueryString;\n    pageView.page_path = window.location.pathname + piiSafeQueryString;\n    return pageView;\n}\nfunction getPiiSafeQueryString(queryString) {\n    //todo: for safety, convert to lowercase, so that if the user changes the case of the url, we still don't collect pii\n    const queryParams = new URLSearchParams(queryString);\n    let postcode = queryParams.get('postcode');\n    if (postcode == null) {\n        // null indicates original query params were already pii safe\n        return null;\n    }\n    postcode = toOutcode(postcode);\n    queryParams.set('postcode', postcode);\n    queryParams.delete('latitude');\n    queryParams.delete('longitude');\n    return '?' + queryParams.toString();\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","import initAnalytics from './components/analytics';\ninitAnalytics(window.GA_MEASUREMENT_ID);\n(function ($) {\n    'use strict';\n    function fhgov() {\n        this.init = function () {\n            showHideFilters();\n            cookiesBanner();\n        };\n        let showHideFilters = function () {\n            $('.js-show-hide-filters').click(function (evt) {\n                evt.preventDefault();\n                $('.filters-component').toggleClass('app-results-filter-overlay');\n                $('body').toggleClass('app-results-filter-overlay-active');\n            });\n        };\n        let cookiesBanner = function () {\n            let $cookiesBanner = $('.govuk-cookie-banner');\n            let $cookiesBannerMessage = $('.govuk-cookie-banner__message');\n            let $cookiesBannerConfirmation = $('.govuk-cookie-banner__confirmation');\n            let $cookiesBannerAccepted = $('.govuk-cookie-banner__confirmation-message__accepted');\n            let $cookiesBannerRejected = $('.govuk-cookie-banner__confirmation-message__rejected');\n            let date = new Date();\n            date.setTime(date.getTime() + 24 * 60 * 60 * 1000 * 365);\n            let cookiesAccept = function () {\n                document.cookie = `service_directory_cookies_policy=accept; expires=date; path=/`;\n                $cookiesBannerMessage.addClass('govuk-hidden');\n                $cookiesBannerConfirmation.removeClass('govuk-hidden');\n                $cookiesBannerAccepted.removeClass('govuk-hidden');\n                $('#cookies-page-accepted').prop('checked', true);\n            };\n            let cookiesReject = function () {\n                deleteCookies();\n                document.cookie = `service_directory_cookies_policy=reject; expires=date; path=/`;\n                $cookiesBannerMessage.addClass('govuk-hidden');\n                $cookiesBannerConfirmation.removeClass('govuk-hidden');\n                $cookiesBannerRejected.removeClass('govuk-hidden');\n                $('#cookies-page-rejected').prop('checked', true);\n            };\n            let getCookie = function (name) {\n                let cookieArr = document.cookie.split(\";\");\n                for (let i = 0; i < cookieArr.length; i++) {\n                    let cookiePair = cookieArr[i].split(\"=\");\n                    if (name == cookiePair[0].trim()) {\n                        return decodeURIComponent(cookiePair[1]);\n                    }\n                }\n            };\n            let deleteCookies = function () {\n                let cookies = document.cookie.split(\";\");\n                for (let i = 0; i < cookies.length; i++) {\n                    let equals = cookies[i].indexOf(\"=\");\n                    let name = equals > -1 ? cookies[i].substr(0, equals) : cookies[i];\n                    document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n                }\n            };\n            let cookie_value = getCookie('service_directory_cookies_policy');\n            if (typeof cookie_value === 'undefined') {\n                $cookiesBanner.removeClass('govuk-hidden');\n                $('#cookies-banner-accept').click(function () {\n                    cookiesAccept();\n                });\n                $('#cookies-banner-reject').click(function () {\n                    cookiesReject();\n                });\n                $('#cookies-banner-close').click(function () {\n                    $cookiesBanner.addClass('govuk-hidden');\n                });\n            }\n            else if (cookie_value === 'accept') {\n                $('#cookies-page-accepted').prop('checked', true);\n            }\n            else if (cookie_value === 'reject') {\n                $('#cookies-page-rejected').prop('checked', true);\n            }\n            $('#cookies-page-save').click(function () {\n                if ($('#cookies-page-accepted').is(':checked')) {\n                    cookiesAccept();\n                    $('#cookies-saved-notification').removeClass('govuk-hidden');\n                    $('html, body').animate({ scrollTop: 0 }, 'fast');\n                }\n                if ($('#cookies-page-rejected').is(':checked')) {\n                    cookiesReject();\n                    $('#cookies-saved-notification').removeClass('govuk-hidden');\n                    $('html, body').animate({ scrollTop: 0 }, 'fast');\n                }\n            });\n        };\n    }\n    window.fhgov = new fhgov();\n})(jQuery);\n//todo: move into $(document).ready()?\nwindow.fhgov.init();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n"]}