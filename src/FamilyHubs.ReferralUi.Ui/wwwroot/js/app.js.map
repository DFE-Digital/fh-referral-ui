{"version":3,"sources":["tmp/js/components/cookie-functions.js","tmp/js/components/postcode.js","tmp/js/components/analytics.js","tmp/js/components/cookie-banner.js","tmp/js/app.js"],"names":["CONSENT_COOKIE_NAME","getCookie","name","cookieArr","document","cookie","split","i","length","cookiePair","trim","decodeURIComponent","areAnalyticsAccepted","consentCookie","console","log","INCODE_REGEX","POSTCODE_REGEX","SPACE_REGEX","sanitize","s","replace","toUpperCase","isValid","postcode","match","toOutcode","gtag","command","args","window","dataLayer","push","arguments","GaMeasurementId","initAnalytics","gaMeasurementId","Boolean","setDefaultConsent","loadGaScript","Date","pageViewParams","getPiiSafePageView","send_page_view","page_path","page_location","page_referrer","referrer","cookie_flags","updateAnalyticsStorageConsent","sendPageViewEvent","analytics_storage","granted","delayMs","options","f","getElementsByTagName","j","createElement","async","src","parentNode","insertBefore","pageView","page_title","title","send_to","piiSafeReferrerQueryString","getPiiSafeQueryString","URL","search","urlArray","piiSafeQueryString","location","href","pathname","queryString","queryParams","URLSearchParams","get","set","delete","toString","cookiesBanner","$cookiesBanner","$","$cookiesBannerMessage","$cookiesBannerConfirmation","$cookiesBannerAccepted","$cookiesBannerRejected","date","setTime","getTime","cookiesAccept","addClass","removeClass","prop","cookiesReject","deleteCookies","cookies","equals","indexOf","substr","cookie_value","click","is","animate","scrollTop","GA_MEASUREMENT_ID","fhgov","this","init","showHideFilters","evt","preventDefault","toggleClass","jQuery"],"mappings":"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","file":"app.js","sourcesContent":["/* Name of the cookie to save users cookie preferences to. */\nconst CONSENT_COOKIE_NAME = 'service_directory_cookies_policy';\nexport function getCookie(name) {\n    let cookieArr = document.cookie.split(\";\");\n    for (let i = 0; i < cookieArr.length; i++) {\n        let cookiePair = cookieArr[i].split(\"=\");\n        if (name == cookiePair[0].trim()) {\n            return decodeURIComponent(cookiePair[1]);\n        }\n    }\n}\nexport function areAnalyticsAccepted() {\n    var consentCookie = getCookie(CONSENT_COOKIE_NAME);\n    console.log(consentCookie);\n    if (consentCookie == 'accept') {\n        return true;\n    }\n    return false;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY29va2llLWZ1bmN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsTUFBTSxtQkFBbUIsR0FBRyxrQ0FBa0MsQ0FBQztBQUUvRCxNQUFNLFVBQVUsU0FBUyxDQUFDLElBQVk7SUFDckMsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDMUMsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QyxJQUFJLElBQUksSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDakMsT0FBTyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN6QztLQUNEO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0I7SUFDaEMsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4QixJQUFJLGFBQWEsSUFBSSxRQUFRLEVBQUU7UUFDM0IsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUMiLCJmaWxlIjoiY29tcG9uZW50cy9jb29raWUtZnVuY3Rpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogTmFtZSBvZiB0aGUgY29va2llIHRvIHNhdmUgdXNlcnMgY29va2llIHByZWZlcmVuY2VzIHRvLiAqL1xyXG5jb25zdCBDT05TRU5UX0NPT0tJRV9OQU1FID0gJ3NlcnZpY2VfZGlyZWN0b3J5X2Nvb2tpZXNfcG9saWN5JztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb29raWUobmFtZTogc3RyaW5nKSB7XHJcblx0bGV0IGNvb2tpZUFyciA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdChcIjtcIik7XHJcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVBcnIubGVuZ3RoOyBpKyspIHtcclxuXHRcdGxldCBjb29raWVQYWlyID0gY29va2llQXJyW2ldLnNwbGl0KFwiPVwiKTtcclxuXHRcdGlmIChuYW1lID09IGNvb2tpZVBhaXJbMF0udHJpbSgpKSB7XHJcblx0XHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29va2llUGFpclsxXSk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJlQW5hbHl0aWNzQWNjZXB0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICB2YXIgY29uc2VudENvb2tpZSA9IGdldENvb2tpZShDT05TRU5UX0NPT0tJRV9OQU1FKTtcclxuXHRjb25zb2xlLmxvZyhjb25zZW50Q29va2llKTtcclxuICAgIGlmIChjb25zZW50Q29va2llID09ICdhY2NlcHQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IFxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxufSJdfQ==\n","// from https://github.com/ideal-postcodes/postcode\n/**\n * @hidden\n */\nexport const DISTRICT_SPLIT_REGEX = /^([a-z]{1,2}\\d)([a-z])$/i;\n/**\n * Tests for the unit section of a postcode\n */\nexport const UNIT_REGEX = /[a-z]{2}$/i;\n/**\n * Tests for the inward code section of a postcode\n */\nexport const INCODE_REGEX = /\\d[a-z]{2}$/i;\n/**\n * Tests for the outward code section of a postcode\n */\nexport const OUTCODE_REGEX = /^[a-z]{1,2}\\d[a-z\\d]?$/i;\n/**\n * Tests for a valid postcode\n */\nexport const POSTCODE_REGEX = /^[a-z]{1,2}\\d[a-z\\d]?\\s*\\d[a-z]{2}$/i;\n/**\n * Test for a valid postcode embedded in text\n */\nexport const POSTCODE_CORPUS_REGEX = /[a-z]{1,2}\\d[a-z\\d]?\\s*\\d[a-z]{2}/gi;\n/**\n * Tests for the area section of a postcode\n */\nexport const AREA_REGEX = /^[a-z]{1,2}/i;\n/**\n * Invalid postcode prototype\n * @hidden\n */\nconst invalidPostcode = {\n    valid: false,\n    postcode: null,\n    incode: null,\n    outcode: null,\n    area: null,\n    district: null,\n    subDistrict: null,\n    sector: null,\n    unit: null,\n};\n/**\n * Return first elem of input is RegExpMatchArray or null if input null\n * @hidden\n */\nconst firstOrNull = (match) => {\n    if (match === null)\n        return null;\n    return match[0];\n};\nconst SPACE_REGEX = /\\s+/gi;\n/**\n * Drop all spaces and uppercase\n * @hidden\n */\nconst sanitize = (s) => s.replace(SPACE_REGEX, \"\").toUpperCase();\n/**\n * Sanitizes string and returns regex matches\n * @hidden\n */\nconst matchOn = (s, regex) => sanitize(s).match(regex);\n/**\n * Detects a \"valid\" postcode\n * - Starts and ends on a non-space character\n * - Any length of intervening space is allowed\n * - Must conform to one of following schemas:\n *  - AA1A 1AA\n *  - A1A 1AA\n *  - A1 1AA\n *  - A99 9AA\n *  - AA9 9AA\n *  - AA99 9AA\n */\nexport const isValid = (postcode) => postcode.match(POSTCODE_REGEX) !== null;\n/**\n * Returns true if string is a valid outcode\n */\nexport const validOutcode = (outcode) => outcode.match(OUTCODE_REGEX) !== null;\n/**\n * Returns a normalised postcode string (i.e. uppercased and properly spaced)\n *\n * Returns null if invalid postcode\n */\nexport const toNormalised = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const incode = toIncode(postcode);\n    if (incode === null)\n        return null;\n    return `${outcode} ${incode}`;\n};\n/**\n * Returns a correctly formatted outcode given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toOutcode = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    return sanitize(postcode).replace(INCODE_REGEX, \"\");\n};\n/**\n * Returns a correctly formatted incode given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toIncode = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, INCODE_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted area given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toArea = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, AREA_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted sector given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toSector = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const incode = toIncode(postcode);\n    if (incode === null)\n        return null;\n    return `${outcode} ${incode[0]}`;\n};\n/**\n * Returns a correctly formatted unit given a postcode\n *\n * Returns null if invalid postcode\n */\nexport const toUnit = (postcode) => {\n    if (!isValid(postcode))\n        return null;\n    const match = matchOn(postcode, UNIT_REGEX);\n    return firstOrNull(match);\n};\n/**\n * Returns a correctly formatted district given a postcode\n *\n * Returns null if invalid postcode\n *\n * @example\n *\n * ```\n * toDistrict(\"AA9 9AA\") // => \"AA9\"\n * toDistrict(\"A9A 9AA\") // => \"A9\"\n * ```\n */\nexport const toDistrict = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const match = outcode.match(DISTRICT_SPLIT_REGEX);\n    if (match === null)\n        return outcode;\n    return match[1];\n};\n/**\n * Returns a correctly formatted subdistrict given a postcode\n *\n * Returns null if no subdistrict is available on valid postcode\n * Returns null if invalid postcode\n *\n * @example\n *\n * ```\n * toSubDistrict(\"AA9A 9AA\") // => \"AA9A\"\n * toSubDistrict(\"A9A 9AA\") // => \"A9A\"\n * toSubDistrict(\"AA9 9AA\") // => null\n * toSubDistrict(\"A9 9AA\") // => null\n * ```\n */\nexport const toSubDistrict = (postcode) => {\n    const outcode = toOutcode(postcode);\n    if (outcode === null)\n        return null;\n    const split = outcode.match(DISTRICT_SPLIT_REGEX);\n    if (split === null)\n        return null;\n    return outcode;\n};\n/**\n * Returns a ValidPostcode or InvalidPostcode object from a postcode string\n *\n * @example\n *\n * ```\n * import { parse } from \"postcode\";\n *\n * const {\n * postcode,    // => \"SW1A 2AA\"\n * outcode,     // => \"SW1A\"\n * incode,      // => \"2AA\"\n * area,        // => \"SW\"\n * district,    // => \"SW1\"\n * unit,        // => \"AA\"\n * sector,      // => \"SW1A 2\"\n * subDistrict, // => \"SW1A\"\n * valid,       // => true\n * } = parse(\"Sw1A     2aa\");\n *\n * const {\n * postcode,    // => null\n * outcode,     // => null\n * incode,      // => null\n * area,        // => null\n * district,    // => null\n * unit,        // => null\n * sector,      // => null\n * subDistrict, // => null\n * valid,       // => false\n * } = parse(\"    Oh no, ):   \");\n * ```\n */\nexport const parse = (postcode) => {\n    if (!isValid(postcode))\n        return Object.assign({}, invalidPostcode);\n    return {\n        valid: true,\n        postcode: toNormalised(postcode),\n        incode: toIncode(postcode),\n        outcode: toOutcode(postcode),\n        area: toArea(postcode),\n        district: toDistrict(postcode),\n        subDistrict: toSubDistrict(postcode),\n        sector: toSector(postcode),\n        unit: toUnit(postcode),\n    };\n};\n/**\n * Searches a body of text for postcode matches\n *\n * Returns an empty array if no match\n *\n * @example\n *\n * ```\n * // Retrieve valid postcodes in a body of text\n * const matches = match(\"The PM and her no.2 live at SW1A2aa and SW1A 2AB\"); // => [\"SW1A2aa\", \"SW1A 2AB\"]\n *\n * // Perform transformations like normalisation postcodes using `.map` and `toNormalised`\n * matches.map(toNormalised); // => [\"SW1A 2AA\", \"SW1A 2AB\"]\n *\n * // No matches yields empty array\n * match(\"Some London outward codes are SW1A, NW1 and E1\"); // => []\n * ```\n */\nexport const match = (corpus) => corpus.match(POSTCODE_CORPUS_REGEX) || [];\n/**\n * Replaces postcodes in a body of text with a string\n *\n * By default the replacement string is empty string `\"\"`\n *\n * @example\n *\n * ```\n * // Replace postcodes in a body of text\n * replace(\"The PM and her no.2 live at SW1A2AA and SW1A 2AB\");\n * // => { match: [\"SW1A2AA\", \"SW1A 2AB\"], result: \"The PM and her no.2 live at  and \" }\n *\n * // Add custom replacement\n * replace(\"The PM lives at SW1A 2AA\", \"Downing Street\");\n * // => { match: [\"SW1A 2AA\"], result: \"The PM lives at Downing Street\" };\n *\n * // No match\n * replace(\"Some London outward codes are SW1A, NW1 and E1\");\n * // => { match: [], result: \"Some London outward codes are SW1A, NW1 and E1\" }\n * ```\n */\nexport const replace = (corpus, replaceWith = \"\") => ({\n    match: match(corpus),\n    result: corpus.replace(POSTCODE_CORPUS_REGEX, replaceWith),\n});\nexport const FIXABLE_REGEX = /^\\s*[a-z01]{1,2}[0-9oi][a-z\\d]?\\s*[0-9oi][a-z01]{2}\\s*$/i;\n/**\n * Attempts to fix and clean a postcode. Specifically:\n * - Performs character conversion on obviously wrong and commonly mixed up letters (e.g. O => 0 and vice versa)\n * - Trims string\n * - Properly adds space between outward and inward codes\n *\n * If the postcode cannot be coerced into a valid format, the original string is returned\n *\n * @example\n * ```javascript\n * fix(\" SW1A  2AO\") => \"SW1A 2AO\" // Properly spaces\n * fix(\"SW1A 2A0\") => \"SW1A 2AO\" // 0 is coerced into \"0\"\n * ```\n *\n * Aims to be used in conjunction with parse to make postcode entry more forgiving:\n *\n * @example\n * ```javascript\n * const { inward } = parse(fix(\"SW1A 2A0\")); // inward = \"2AO\"\n * ```\n */\nexport const fix = (s) => {\n    const match = s.match(FIXABLE_REGEX);\n    if (match === null)\n        return s;\n    s = s.toUpperCase().trim().replace(/\\s+/gi, \"\");\n    const l = s.length;\n    const inward = s.slice(l - 3, l);\n    return `${coerceOutcode(s.slice(0, l - 3))} ${coerce(\"NLL\", inward)}`;\n};\nconst toLetter = {\n    \"0\": \"O\",\n    \"1\": \"I\",\n};\nconst toNumber = {\n    O: \"0\",\n    I: \"1\",\n};\nconst coerceOutcode = (i) => {\n    if (i.length === 2)\n        return coerce(\"LN\", i);\n    if (i.length === 3)\n        return coerce(\"L??\", i);\n    if (i.length === 4)\n        return coerce(\"LLN?\", i);\n    return i;\n};\n/**\n * Given a pattern of letters, numbers and unknowns represented as a sequence\n * of L, Ns and ? respectively; coerce them into the correct type given a\n * mapping of potentially confused letters\n *\n * @hidden\n *\n * @example coerce(\"LLN\", \"0O8\") => \"OO8\"\n */\nconst coerce = (pattern, input) => input\n    .split(\"\")\n    .reduce((acc, c, i) => {\n    const target = pattern.charAt(i);\n    if (target === \"N\")\n        acc.push(toNumber[c] || c);\n    if (target === \"L\")\n        acc.push(toLetter[c] || c);\n    if (target === \"?\")\n        acc.push(c);\n    return acc;\n}, [])\n    .join(\"\");\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","//todo: consent mode debugging/check: https://developers.google.com/tag-platform/devguides/consent-debugging\nimport { areAnalyticsAccepted } from './cookie-functions';\nimport { toOutcode } from './postcode';\nfunction gtag(command, ...args) {\n    window.dataLayer = window.dataLayer || [];\n    window.dataLayer.push(arguments);\n}\nlet GaMeasurementId = '';\n//todo: use prototype? (or class?)\n// (having an object (prototype/class) will ensure that GaMeasurementId will have already been set)\nexport default function initAnalytics(gaMeasurementId) {\n    // if the environment doesn't have a measurement id, don't load analytics\n    if (!Boolean(gaMeasurementId)) {\n        return;\n    }\n    GaMeasurementId = gaMeasurementId;\n    setDefaultConsent();\n    loadGaScript(gaMeasurementId);\n    gtag('js', new Date());\n    const pageViewParams = getPiiSafePageView(gaMeasurementId);\n    // set the config for auto generated events other than page_view\n    gtag('config', gaMeasurementId, {\n        send_page_view: false,\n        page_path: pageViewParams.page_path,\n        page_location: pageViewParams.page_location,\n        page_referrer: pageViewParams.referrer,\n        cookie_flags: 'secure'\n    });\n    if (areAnalyticsAccepted()) {\n        updateAnalyticsStorageConsent(true);\n    }\n    sendPageViewEvent();\n}\nfunction setDefaultConsent() {\n    gtag('consent', 'default', {\n        'analytics_storage': 'denied'\n    });\n    gtag('set', 'url_passthrough', true);\n}\nexport function updateAnalyticsStorageConsent(granted, delayMs) {\n    let options = {\n        'analytics_storage': granted ? 'granted' : 'denied'\n    };\n    if (typeof delayMs !== 'undefined') {\n        options['wait_for_update'] = delayMs;\n    }\n    gtag('consent', 'update', options);\n}\nexport function sendPageViewEvent() {\n    // send the page_view event manually (https://developers.google.com/analytics/devguides/collection/gtagjs/pages#default_behavior)\n    gtag('event', 'page_view', getPiiSafePageView(GaMeasurementId));\n}\nexport function sendAnalyticsCustomEvent(accepted, source) {\n    gtag('event', 'analytics', {\n        'accepted': accepted,\n        'source': source\n    });\n}\nfunction loadGaScript(gaMeasurementId) {\n    const f = document.getElementsByTagName('script')[0];\n    const j = document.createElement('script');\n    j.async = true;\n    j.src = 'https://www.googletagmanager.com/gtag/js?id=' + gaMeasurementId;\n    f.parentNode.insertBefore(j, f);\n}\nfunction getPiiSafePageView(gaMeasurementId) {\n    const pageView = {\n        page_title: document.title,\n        send_to: gaMeasurementId,\n        referrer: '',\n        page_location: '',\n        page_path: ''\n    };\n    //todo: set as referrer or page_referrer in pageView - does it matter? is it only picking it up from the config?\n    //todo: get piisafe referrer function\n    if (document.referrer !== '') {\n        const referrerUrl = new URL(document.referrer);\n        const piiSafeReferrerQueryString = getPiiSafeQueryString(referrerUrl.search);\n        if (piiSafeReferrerQueryString == null) {\n            pageView.referrer = document.referrer;\n        }\n        else {\n            const urlArray = document.referrer.split('?');\n            pageView.referrer = urlArray[0] + piiSafeReferrerQueryString;\n        }\n    }\n    const piiSafeQueryString = getPiiSafeQueryString(window.location.search);\n    if (piiSafeQueryString == null) {\n        pageView.page_location = window.location.href;\n        pageView.page_path = window.location.pathname + window.location.search;\n        return pageView;\n    }\n    const urlArray = window.location.href.split('?');\n    pageView.page_location = urlArray[0] + piiSafeQueryString;\n    pageView.page_path = window.location.pathname + piiSafeQueryString;\n    return pageView;\n}\nfunction getPiiSafeQueryString(queryString) {\n    //todo: for safety, convert to lowercase, so that if the user changes the case of the url, we still don't collect pii\n    const queryParams = new URLSearchParams(queryString);\n    let postcode = queryParams.get('postcode');\n    if (postcode == null) {\n        // null indicates original query params were already pii safe\n        return null;\n    }\n    postcode = toOutcode(postcode);\n    queryParams.set('postcode', postcode);\n    queryParams.delete('latitude');\n    queryParams.delete('longitude');\n    return '?' + queryParams.toString();\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","import { getCookie } from './cookie-functions';\nexport function cookiesBanner() {\n    let $cookiesBanner = $('.govuk-cookie-banner');\n    let $cookiesBannerMessage = $('.govuk-cookie-banner__message');\n    let $cookiesBannerConfirmation = $('.govuk-cookie-banner__confirmation');\n    let $cookiesBannerAccepted = $('.govuk-cookie-banner__confirmation-message__accepted');\n    let $cookiesBannerRejected = $('.govuk-cookie-banner__confirmation-message__rejected');\n    let date = new Date();\n    date.setTime(date.getTime() + 24 * 60 * 60 * 1000 * 365);\n    let cookiesAccept = function () {\n        document.cookie = `service_directory_cookies_policy=accept; expires=date; path=/`;\n        $cookiesBannerMessage.addClass('govuk-hidden');\n        $cookiesBannerConfirmation.removeClass('govuk-hidden');\n        $cookiesBannerAccepted.removeClass('govuk-hidden');\n        $('#cookies-page-accepted').prop('checked', true);\n    };\n    let cookiesReject = function () {\n        deleteCookies();\n        document.cookie = `service_directory_cookies_policy=reject; expires=date; path=/`;\n        $cookiesBannerMessage.addClass('govuk-hidden');\n        $cookiesBannerConfirmation.removeClass('govuk-hidden');\n        $cookiesBannerRejected.removeClass('govuk-hidden');\n        $('#cookies-page-rejected').prop('checked', true);\n    };\n    let deleteCookies = function () {\n        let cookies = document.cookie.split(\";\");\n        for (let i = 0; i < cookies.length; i++) {\n            let equals = cookies[i].indexOf(\"=\");\n            let name = equals > -1 ? cookies[i].substr(0, equals) : cookies[i];\n            document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n        }\n    };\n    let cookie_value = getCookie('service_directory_cookies_policy');\n    if (typeof cookie_value === 'undefined') {\n        $cookiesBanner.removeClass('govuk-hidden');\n        $('#cookies-banner-accept').click(function () {\n            cookiesAccept();\n        });\n        $('#cookies-banner-reject').click(function () {\n            cookiesReject();\n        });\n        $('#cookies-banner-close').click(function () {\n            $cookiesBanner.addClass('govuk-hidden');\n        });\n    }\n    else if (cookie_value === 'accept') {\n        $('#cookies-page-accepted').prop('checked', true);\n    }\n    else if (cookie_value === 'reject') {\n        $('#cookies-page-rejected').prop('checked', true);\n    }\n    $('#cookies-page-save').click(function () {\n        if ($('#cookies-page-accepted').is(':checked')) {\n            cookiesAccept();\n            $('#cookies-saved-notification').removeClass('govuk-hidden');\n            $('html, body').animate({ scrollTop: 0 }, 'fast');\n        }\n        if ($('#cookies-page-rejected').is(':checked')) {\n            cookiesReject();\n            $('#cookies-saved-notification').removeClass('govuk-hidden');\n            $('html, body').animate({ scrollTop: 0 }, 'fast');\n        }\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY29va2llLWJhbm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFL0MsTUFBTSxVQUFVLGFBQWE7SUFDNUIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDL0MsSUFBSSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUMvRCxJQUFJLDBCQUEwQixHQUFHLENBQUMsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ3pFLElBQUksc0JBQXNCLEdBQUcsQ0FBQyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7SUFDdkYsSUFBSSxzQkFBc0IsR0FBRyxDQUFDLENBQUMsc0RBQXNELENBQUMsQ0FBQztJQUN2RixJQUFJLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBRXRCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUV6RCxJQUFJLGFBQWEsR0FBRztRQUNuQixRQUFRLENBQUMsTUFBTSxHQUFHLCtEQUErRCxDQUFDO1FBRWxGLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMvQywwQkFBMEIsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsc0JBQXNCLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFBO0lBRUQsSUFBSSxhQUFhLEdBQUc7UUFDbkIsYUFBYSxFQUFFLENBQUM7UUFDaEIsUUFBUSxDQUFDLE1BQU0sR0FBRywrREFBK0QsQ0FBQztRQUVsRixxQkFBcUIs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SixDQUFDIiwiZmlsZSI6ImNvbXBvbmVudHMvY29va2llLWJhbm5lci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENvb2tpZSB9IGZyb20gJy4vY29va2llLWZ1bmN0aW9ucyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29va2llc0Jhbm5lcigpIHtcclxuXHRsZXQgJGNvb2tpZXNCYW5uZXIgPSAkKCcuZ292dWstY29va2llLWJhbm5lcicpO1xyXG5cdGxldCAkY29va2llc0Jhbm5lck1lc3NhZ2UgPSAkKCcuZ292dWstY29va2llLWJhbm5lcl9fbWVzc2FnZScpO1xyXG5cdGxldCAkY29va2llc0Jhbm5lckNvbmZpcm1hdGlvbiA9ICQoJy5nb3Z1ay1jb29raWUtYmFubmVyX19jb25maXJtYXRpb24nKTtcclxuXHRsZXQgJGNvb2tpZXNCYW5uZXJBY2NlcHRlZCA9ICQoJy5nb3Z1ay1jb29raWUtYmFubmVyX19jb25maXJtYXRpb24tbWVzc2FnZV9fYWNjZXB0ZWQnKTtcclxuXHRsZXQgJGNvb2tpZXNCYW5uZXJSZWplY3RlZCA9ICQoJy5nb3Z1ay1jb29raWUtYmFubmVyX19jb25maXJtYXRpb24tbWVzc2FnZV9fcmVqZWN0ZWQnKTtcclxuXHRsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcblxyXG5cdGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIDI0ICogNjAgKiA2MCAqIDEwMDAgKiAzNjUpO1xyXG5cclxuXHRsZXQgY29va2llc0FjY2VwdCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdGRvY3VtZW50LmNvb2tpZSA9IGBzZXJ2aWNlX2RpcmVjdG9yeV9jb29raWVzX3BvbGljeT1hY2NlcHQ7IGV4cGlyZXM9ZGF0ZTsgcGF0aD0vYDtcclxuXHJcblx0XHQkY29va2llc0Jhbm5lck1lc3NhZ2UuYWRkQ2xhc3MoJ2dvdnVrLWhpZGRlbicpO1xyXG5cdFx0JGNvb2tpZXNCYW5uZXJDb25maXJtYXRpb24ucmVtb3ZlQ2xhc3MoJ2dvdnVrLWhpZGRlbicpO1xyXG5cdFx0JGNvb2tpZXNCYW5uZXJBY2NlcHRlZC5yZW1vdmVDbGFzcygnZ292dWstaGlkZGVuJyk7XHJcblx0XHQkKCcjY29va2llcy1wYWdlLWFjY2VwdGVkJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cdH1cclxuXHJcblx0bGV0IGNvb2tpZXNSZWplY3QgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRkZWxldGVDb29raWVzKCk7XHJcblx0XHRkb2N1bWVudC5jb29raWUgPSBgc2VydmljZV9kaXJlY3RvcnlfY29va2llc19wb2xpY3k9cmVqZWN0OyBleHBpcmVzPWRhdGU7IHBhdGg9L2A7XHJcblxyXG5cdFx0JGNvb2tpZXNCYW5uZXJNZXNzYWdlLmFkZENsYXNzKCdnb3Z1ay1oaWRkZW4nKTtcclxuXHRcdCRjb29raWVzQmFubmVyQ29uZmlybWF0aW9uLnJlbW92ZUNsYXNzKCdnb3Z1ay1oaWRkZW4nKTtcclxuXHRcdCRjb29raWVzQmFubmVyUmVqZWN0ZWQucmVtb3ZlQ2xhc3MoJ2dvdnVrLWhpZGRlbicpO1xyXG5cdFx0JCgnI2Nvb2tpZXMtcGFnZS1yZWplY3RlZCcpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcclxuXHR9XHJcblxyXG5cdGxldCBkZWxldGVDb29raWVzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0bGV0IGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoXCI7XCIpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGxldCBlcXVhbHMgPSBjb29raWVzW2ldLmluZGV4T2YoXCI9XCIpO1xyXG5cdFx0XHRsZXQgbmFtZSA9IGVxdWFscyA+IC0xID8gY29va2llc1tpXS5zdWJzdHIoMCwgZXF1YWxzKSA6IGNvb2tpZXNbaV07XHJcblx0XHRcdGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyBcIj07ZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVFwiO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bGV0IGNvb2tpZV92YWx1ZSA9IGdldENvb2tpZSgnc2VydmljZV9kaXJlY3RvcnlfY29va2llc19wb2xpY3knKTtcclxuXHJcblx0aWYgKHR5cGVvZiBjb29raWVfdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHQkY29va2llc0Jhbm5lci5yZW1vdmVDbGFzcygnZ292dWstaGlkZGVuJyk7XHJcblxyXG5cdFx0JCgnI2Nvb2tpZXMtYmFubmVyLWFjY2VwdCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0Y29va2llc0FjY2VwdCgpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0JCgnI2Nvb2tpZXMtYmFubmVyLXJlamVjdCcpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0Y29va2llc1JlamVjdCgpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0JCgnI2Nvb2tpZXMtYmFubmVyLWNsb3NlJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG5cdFx0XHQkY29va2llc0Jhbm5lci5hZGRDbGFzcygnZ292dWstaGlkZGVuJyk7XHJcblx0XHR9KTtcclxuXHR9IGVsc2UgaWYgKGNvb2tpZV92YWx1ZSA9PT0gJ2FjY2VwdCcpIHtcclxuXHRcdCQoJyNjb29raWVzLXBhZ2UtYWNjZXB0ZWQnKS5wcm9wKCdjaGVja2VkJywgdHJ1ZSk7XHJcblx0fSBlbHNlIGlmIChjb29raWVfdmFsdWUgPT09ICdyZWplY3QnKSB7XHJcblx0XHQkKCcjY29va2llcy1wYWdlLXJlamVjdGVkJykucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xyXG5cdH1cclxuXHJcblx0JCgnI2Nvb2tpZXMtcGFnZS1zYXZlJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG5cdFx0aWYgKCQoJyNjb29raWVzLXBhZ2UtYWNjZXB0ZWQnKS5pcygnOmNoZWNrZWQnKSkge1xyXG5cdFx0XHRjb29raWVzQWNjZXB0KCk7XHJcblx0XHRcdCQoJyNjb29raWVzLXNhdmVkLW5vdGlmaWNhdGlvbicpLnJlbW92ZUNsYXNzKCdnb3Z1ay1oaWRkZW4nKTtcclxuXHRcdFx0JCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IDAgfSwgJ2Zhc3QnKTtcclxuXHRcdH1cclxuXHRcdGlmICgkKCcjY29va2llcy1wYWdlLXJlamVjdGVkJykuaXMoJzpjaGVja2VkJykpIHtcclxuXHRcdFx0Y29va2llc1JlamVjdCgpO1xyXG5cdFx0XHQkKCcjY29va2llcy1zYXZlZC1ub3RpZmljYXRpb24nKS5yZW1vdmVDbGFzcygnZ292dWstaGlkZGVuJyk7XHJcblx0XHRcdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiAwIH0sICdmYXN0Jyk7XHJcblx0XHR9XHJcblx0fSk7XHJcbn0iXX0=\n","import initAnalytics from './components/analytics';\nimport { cookiesBanner } from './components/cookie-banner';\ninitAnalytics(window.GA_MEASUREMENT_ID);\n(function ($) {\n    'use strict';\n    function fhgov() {\n        this.init = function () {\n            showHideFilters();\n            cookiesBanner();\n        };\n        let showHideFilters = function () {\n            $('.js-show-hide-filters').click(function (evt) {\n                evt.preventDefault();\n                $('.filters-component').toggleClass('app-results-filter-overlay');\n                $('body').toggleClass('app-results-filter-overlay-active');\n            });\n        };\n    }\n    window.fhgov = new fhgov();\n})(jQuery);\n//todo: move into $(document).ready()?\nwindow.fhgov.init();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxPQUFPLGFBQWEsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0QsYUFBYSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXhDLENBQUMsVUFBVSxDQUFDO0lBQ1gsWUFBWSxDQUFDO0lBQ2IsU0FBUyxLQUFLO1FBQ2IsSUFBSSxDQUFDLElBQUksR0FBRztZQUNYLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLGFBQWEsRUFBRSxDQUFDO1FBQ2pCLENBQUMsQ0FBQztRQUVGLElBQUksZUFBZSxHQUFHO1lBQ3JCLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUc7Z0JBQzdDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFFckIsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsV0FBVyxDQUFDLDRCQUE0QixDQUFDLENBQUM7Z0JBQ2xFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLENBQUMsbUNBQW1DLENBQUMsQ0FBQztZQUM1RCxDQUFDLENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQTtJQUVGLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7QUFDNUIsQ0FBQyxDQUNBLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFVixzQ0FBc0M7QUFDdEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyB9O1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgZmhnb3Y6IGFueTtcclxuICAgICAgICBHQV9NRUFTVVJFTUVOVF9JRDogc3RyaW5nO1xyXG4gICAgICAgIEdBX0NPTlRBSU5FUl9JRDogc3RyaW5nO1xyXG4gICAgICAgIGRhdGFMYXllcjogYW55W107XHJcbiAgICB9XHJcbn1cclxuXHJcbmltcG9ydCBpbml0QW5hbHl0aWNzIGZyb20gJy4vY29tcG9uZW50cy9hbmFseXRpY3MnO1xyXG5pbXBvcnQgeyBjb29raWVzQmFubmVyIH0gZnJvbSAnLi9jb21wb25lbnRzL2Nvb2tpZS1iYW5uZXInO1xyXG5cclxuaW5pdEFuYWx5dGljcyh3aW5kb3cuR0FfTUVBU1VSRU1FTlRfSUQpO1xyXG5cclxuKGZ1bmN0aW9uICgkKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cdGZ1bmN0aW9uIGZoZ292KCkge1xyXG5cdFx0dGhpcy5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRzaG93SGlkZUZpbHRlcnMoKTtcclxuXHRcdFx0Y29va2llc0Jhbm5lcigpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRsZXQgc2hvd0hpZGVGaWx0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHQkKCcuanMtc2hvdy1oaWRlLWZpbHRlcnMnKS5jbGljayhmdW5jdGlvbiAoZXZ0KSB7XHJcblx0XHRcdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdCQoJy5maWx0ZXJzLWNvbXBvbmVudCcpLnRvZ2dsZUNsYXNzKCdhcHAtcmVzdWx0cy1maWx0ZXItb3ZlcmxheScpO1xyXG5cdFx0XHRcdCQoJ2JvZHknKS50b2dnbGVDbGFzcygnYXBwLXJlc3VsdHMtZmlsdGVyLW92ZXJsYXktYWN0aXZlJyk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHdpbmRvdy5maGdvdiA9IG5ldyBmaGdvdigpO1xyXG59XHJcbikoalF1ZXJ5KTtcclxuXHJcbi8vdG9kbzogbW92ZSBpbnRvICQoZG9jdW1lbnQpLnJlYWR5KCk/XHJcbndpbmRvdy5maGdvdi5pbml0KCk7Il19\n"]}